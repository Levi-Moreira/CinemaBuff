apply plugin: 'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {


    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/*$Lambda$*.*',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Provide*Factory*.*',
            '**/Manifest*.*',
            '**/*Activity*.*',
            '**/*Dialog.*',
            '**/*Fragment*.*',
            '**/*ViewHolder*.*',
            '**/*Adapter*.*',
            '**/*zxing**',
            '**/*customviews**',
            '**/*databinding**',
            '**/injection**',
            '**/directory**',
            '**/adapter**',
            '**/models**',
            '**/extensions**',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*_Factory.*',
            '**/*$*$*.*' // Anonymous classes generated by kotlin
    ]

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([kotlinDebugTree, javaDebugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}